{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:8080/api';\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      // Check if user is already logged in\n      this.checkAuthStatus();\n    }\n    checkAuthStatus() {\n      const token = localStorage.getItem('token');\n      if (token) {\n        this.getCurrentUser().subscribe({\n          next: user => this.currentUserSubject.next(user),\n          error: () => this.logout()\n        });\n      }\n    }\n    getCurrentUser() {\n      return this.http.get(`${this.apiUrl}/auth/user`);\n    }\n    loginWithGoogle() {\n      window.location.href = 'http://localhost:8080/oauth2/authorization/google';\n    }\n    logout() {\n      localStorage.removeItem('token');\n      this.currentUserSubject.next(null);\n      this.http.post(`${this.apiUrl}/auth/logout`, {}).subscribe();\n    }\n    isAuthenticated() {\n      return !!localStorage.getItem('token');\n    }\n    getCurrentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}