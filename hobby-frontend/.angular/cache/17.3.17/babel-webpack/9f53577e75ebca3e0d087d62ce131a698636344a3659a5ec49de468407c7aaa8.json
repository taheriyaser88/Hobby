{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    // Check if user is already logged in\n    this.checkAuthStatus();\n  }\n  checkAuthStatus() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      this.getCurrentUser().subscribe({\n        next: user => this.currentUserSubject.next(user),\n        error: () => this.logout()\n      });\n    }\n  }\n  getCurrentUser() {\n    return this.http.get(`${this.apiUrl}/auth/user`);\n  }\n  loginWithGoogle() {\n    window.location.href = 'http://localhost:8080/oauth2/authorization/google';\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.currentUserSubject.next(null);\n    this.http.post(`${this.apiUrl}/auth/logout`, {}).subscribe();\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n  getCurrentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","checkAuthStatus","token","localStorage","getItem","getCurrentUser","subscribe","next","user","error","logout","get","loginWithGoogle","window","location","href","removeItem","post","isAuthenticated","getCurrentUserValue","value","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/sina/Projects/Hobby/hobby-frontend/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { User } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:8080/api';\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    // Check if user is already logged in\n    this.checkAuthStatus();\n  }\n\n  private checkAuthStatus(): void {\n    const token = localStorage.getItem('token');\n    if (token) {\n      this.getCurrentUser().subscribe({\n        next: (user) => this.currentUserSubject.next(user),\n        error: () => this.logout()\n      });\n    }\n  }\n\n  getCurrentUser(): Observable<User> {\n    return this.http.get<User>(`${this.apiUrl}/auth/user`);\n  }\n\n  loginWithGoogle(): void {\n    window.location.href = 'http://localhost:8080/oauth2/authorization/google';\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this.currentUserSubject.next(null);\n    this.http.post(`${this.apiUrl}/auth/logout`, {}).subscribe();\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  getCurrentUserValue(): User | null {\n    return this.currentUserSubject.value;\n  }\n}\n\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;;;AAMlD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,MAAM,GAAG,2BAA2B;IACpC,KAAAC,kBAAkB,GAAG,IAAIL,eAAe,CAAc,IAAI,CAAC;IAC5D,KAAAM,YAAY,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;IAG1D;IACA,IAAI,CAACC,eAAe,EAAE;EACxB;EAEQA,eAAeA,CAAA;IACrB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACT,IAAI,CAACG,cAAc,EAAE,CAACC,SAAS,CAAC;QAC9BC,IAAI,EAAGC,IAAI,IAAK,IAAI,CAACV,kBAAkB,CAACS,IAAI,CAACC,IAAI,CAAC;QAClDC,KAAK,EAAEA,CAAA,KAAM,IAAI,CAACC,MAAM;OACzB,CAAC;;EAEN;EAEAL,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACT,IAAI,CAACe,GAAG,CAAO,GAAG,IAAI,CAACd,MAAM,YAAY,CAAC;EACxD;EAEAe,eAAeA,CAAA;IACbC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,mDAAmD;EAC5E;EAEAL,MAAMA,CAAA;IACJP,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAAClB,kBAAkB,CAACS,IAAI,CAAC,IAAI,CAAC;IAClC,IAAI,CAACX,IAAI,CAACqB,IAAI,CAAC,GAAG,IAAI,CAACpB,MAAM,cAAc,EAAE,EAAE,CAAC,CAACS,SAAS,EAAE;EAC9D;EAEAY,eAAeA,CAAA;IACb,OAAO,CAAC,CAACf,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAe,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACrB,kBAAkB,CAACsB,KAAK;EACtC;;;uBAxCW1B,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX9B,WAAW;MAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}